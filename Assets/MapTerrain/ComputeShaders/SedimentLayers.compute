float3 CalculateNormal(int x, int z, Texture2D heightmap, int heightSize, float heightScale, float widthScale)
{
    x = clamp(x, 1, heightSize - 2);
    z = clamp(z, 1, heightSize - 2);

    float sx = heightmap[float2(x + 1, z)] - heightmap[float2(x, z)];

    float sy = heightmap[float2(x, z + 1)] - heightmap[float2(x, z)];

    float2 In = float2(-sx * heightScale, sy * heightScale);
    float reconstructZ = sqrt(1.0 - saturate(dot(In.xy, In.xy)));
    float3 normalVector = float3(In.x, reconstructZ, In.y);
    float3 normal = normalize(normalVector);

    return normal;
}

//Random from 0 to 1
float random(float2 uv)
{
    float noise = frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
    return noise;
}

float2 PerlinDirection(float2 p)
{
    p = p % 289;
    float x = float(34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float Perlin(float2 UV)
{
    float2 p = UV * 0.1;
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(PerlinDirection(ip), fp);
    float d01 = dot(PerlinDirection(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(PerlinDirection(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(PerlinDirection(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    float Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
    return Out;
}

#pragma kernel Terrace

RWTexture2D<float4> Result;
Texture2D heightMap;
Texture2D normalHeightmap;
int heightmapResolution;

float terraceSpacing;
float angle;
float terrainHeight;
float terrainWidth;

[numthreads(8,8,1)]
void Terrace(uint3 id : SV_DispatchThreadID)
{
    angle = 90 - angle;

    int x = id.x;
    int z = id.y;

    //Calculate Normal
    float xNorm = ((float)x) / ((float)heightmapResolution);
    float zNorm = ((float)z) / ((float)heightmapResolution);

    float3 normal = CalculateNormal(x, z, normalHeightmap, heightmapResolution, terrainHeight, 1);

    //Calculate Terrace Height
    float height = heightMap[float2(x, z)] * terrainHeight;

    float terraceIncrement = height;
    float increment = 25;
    terraceIncrement /= increment;
    terraceIncrement = floor(terraceIncrement) + 0.5f;
    terraceIncrement *= increment;

    //Apply Noise
    float deviation = 0.95f;
    float spacing = ((random(terraceIncrement) * deviation * 2) + (1 - deviation)) * terraceSpacing;

    height /= spacing;
    height = floor(height) + 0.5f;
    height *= spacing;

    float s = (0.01f * terrainWidth) / spacing;
    float perlin = Perlin(float2(xNorm * s, zNorm * s));
    height += perlin * spacing;

    //Blend Values
    float transition = 20;
    float mix = smoothstep(angle - transition, angle + transition, normal.y * 90);
    Result[id.xy] = lerp(heightMap[float2(x, z)], height / terrainHeight, 1 - mix);
}
